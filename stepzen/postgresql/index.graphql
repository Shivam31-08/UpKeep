type Comment {
  username: String
  text: String
  post_id: ID
  post: Post @materializer(query: "getPostUsingComment_post_id_fkey")
  id: ID!
  created_at: DateTime
}

type Post {
  username: String
  title: String
  subreddit_Id: ID
  subreddit: Subreddit
    @materializer(query: "getSubredditUsingPost_subreddit_Id_fkey")
  image: String
  id: ID!
  created_at: DateTime
  comment: [Comment] @materializer(query: "getCommentUsingComment_post_id_fkey")
  body: String
  vote: [Vote] 
  @materializer(query: "getVotesByPostId"
  arguments :[{name:"post_id", field:"id"}])
}

type Subreddit {
  topic: String
  post: [Post] @materializer(query: "getPostUsingPost_subreddit_Id_fkey")
  id: ID!
  created_at: DateTime
}

type Vote {
  username: String
  upvote: Boolean
  post_id: ID
  post: Post @materializer(query: "getPostUsingVote_post_id_fkey")
  id: ID!
  created_at: DateTime
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getCommentUsingComment_post_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Post' "
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query : """
        select * from "post"
        order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )

    # To get a post list by topic
  getPostListByTopic(topic : String!) : [Post]
  @dbquery(
     type: "postgresql"
      schema: "public"
      query : """
        select *, "post".id as id from "post"
        join "subreddit" on "subreddit"."id" = "post"."subreddit_Id"
        where "subreddit"."topic" = $1
        order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
  )
  
# We want to make a query to get a single post based on the post_id ID! means its non nullable and Post is basically we are getting a single Post in return
  getPostListByPostId(post_id : ID!) : Post
  @dbquery(
      type: "postgresql"
      schema: "public"
      query : """
        select * from "post"
        where "post"."id" = $1
      """
      configuration: "postgresql_config"
  )

  getVotesByPostId(post_id:ID!):[Vote]
  @dbquery(
    type: "postgresql"
     schema: "public"
      query: """
      SELECT * FROM "vote" WHERE "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
  )


  getPostPaginatedList(first: Int, after: Int): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_Id", "title", "username" FROM "post" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getPostUsingComment_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_Id", "title", "username" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingPost_subreddit_Id_fkey(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_Id", "title", "username" FROM "post" WHERE "subreddit_Id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingVote_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_Id", "title", "username" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Subreddit' "
  getSubreddit(id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  getSubredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query:"""
        select * from "subreddit" where "topic"=$1
      """
      configuration: "postgresql_config"
    )

  getSubredditListByTopic(topic: String!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )

 getSubredditListLimit(limit: Int!): [Subreddit]
  @dbquery(
    type:"postgresql"
    schema: "public"
    query:"""
      SELECT * FROM "subreddit"
      ORDER BY "created_at" desc
      LIMIT $1
    """
    configuration: "postgresql_config"
  )

  getSubredditPaginatedList(first: Int, after: Int): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getSubredditUsingPost_subreddit_Id_fkey(subreddit_Id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Vote' "
  getVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVotePaginatedList(first: Int, after: Int): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )

  getVoteUsingVote_post_id_fkey(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "vote" WHERE "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    username: String
    post_id: ID
    text: String
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    post_id: ID
    text: String
    username: String
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "text" = COALESCE($4, "text"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Post' "
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String
    image: String
    title: String
    subreddit_Id: ID
    username: String
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
    insertSubreddit(topic : String!):Subreddit
    @dbquery(
      type: "postgresql"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )

  

  updatePost(
    id: ID!
    body: String
    created_at: DateTime
    image: String
    subreddit_Id: ID
    title: String
    username: String
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "post" SET
        "body" = COALESCE($2, "body"),
        "created_at" = COALESCE($3, "created_at"),
        "image" = COALESCE($4, "image"),
        "subreddit_Id" = COALESCE($5, "subreddit_Id"),
        "title" = COALESCE($6, "title"),
        "username" = COALESCE($7, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Subreddit' "
  deleteSubreddit(id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: DELETE
      configuration: "postgresql_config"
   )
  # insertSubreddit(topic: String, created_at: DateTime): Subreddit
  #   @dbquery(
  #     type: "postgresql"
  #     schema: "public"
  #     table: "subreddit"
  #     dml: INSERT
  #     configuration: "postgresql_config"
  #   )
  updateSubreddit(id: ID!, created_at: DateTime, topic: String): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "subreddit" SET
        "created_at" = COALESCE($2, "created_at"),
        "topic" = COALESCE($3, "topic")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Vote' "
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )

  insertVote(
    username: String
    post_id: ID
    upvote: Boolean
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )


  updateVote(
    id: ID!
    created_at: DateTime
    post_id: ID
    upvote: Boolean
    username: String
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "vote" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "upvote" = COALESCE($4, "upvote"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
